"""
MALD init command - Initialize MALD environment
"""

import os
import logging
from pathlib import Path
from ..utils import config_manager, filesystem


logger = logging.getLogger(__name__)


def handle(args):
    """Handle the init command"""
    logger.info("Initializing MALD environment...")
    
    mald_home = Path.home() / '.mald'
    
    if mald_home.exists() and not args.force:
        logger.info("MALD environment already exists. Use --force to reinitialize.")
        return 0
    
    try:
        # Create MALD home directory structure
        directories = [
            mald_home,
            mald_home / 'kb',           # Knowledge bases
            mald_home / 'config',       # Configuration files
            mald_home / 'sessions',     # Session data
            mald_home / 'cache',        # Cache data
            mald_home / 'ai' / 'models', # AI models
            mald_home / 'ai' / 'index',  # RAG indices
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            logger.debug(f"Created directory: {directory}")
        
        # Initialize default configuration
        config_manager.initialize_default_config(mald_home)
        
        # Create default knowledge base
        default_kb = mald_home / 'kb' / 'default'
        index_file = default_kb / 'index.md'
        if not index_file.exists():
            _create_default_kb(default_kb)
        
        # Setup tmux configuration
        _setup_tmux_config(mald_home)
        
        # Setup neovim configuration
        _setup_neovim_config(mald_home)
        
        logger.info(f"MALD environment initialized at {mald_home}")
        logger.info("Run 'mald session' to start your first session")
        
        return 0
        
    except Exception as e:
        logger.error(f"Failed to initialize MALD environment: {e}")
        return 1


def _create_default_kb(kb_path):
    """Create a default knowledge base"""
    kb_path.mkdir(parents=True, exist_ok=True)
    
    # Create index file
    index_file = kb_path / 'index.md'
    index_content = """# Default Knowledge Base

Welcome to your **default** knowledge base in MALD!

## Getting Started

- [[Welcome to MALD]] - Introduction and setup guide
- [[Daily Notes]] - Daily notes and thoughts
- [[Projects]] - Project documentation
- [[Ideas]] - Random ideas and inspirations

## Quick Links

- Create new note: `[[New Note Title]]`
- Use tags: #getting-started #mald
- Execute code blocks interactively
- Search with `mald search <query>`

## AI Integration

Use local AI for:
- Content generation
- Question answering
- Code assistance
- Knowledge synthesis

Run `mald ai setup` to configure AI models.

---
*Default knowledge base - MALD v0.1.0*
"""
    
    index_file.write_text(index_content)
    
    # Create welcome note
    welcome_note = kb_path / 'Welcome to MALD.md'
    welcome_content = """# Welcome to MALD

Welcome to your **M**arkdown **A**rchive **L**inux **D**istribution!

## Getting Started

This is your default knowledge base. You can:

- Create new notes with `[[double brackets]]` for linking
- Execute code blocks with executable panes
- Use local AI for retrieval and generation
- Take advantage of tmux + neovim integration

## Example Code Block

```python
# This code block can be executed interactively
import datetime
print(f"Welcome to MALD! Current time: {datetime.datetime.now()}")
```

## Links and Organization

Create links to other notes like [[Daily Notes]] or [[Project Ideas]].

Use tags: #getting-started #welcome #mald

## Next Steps

1. Explore the `mald` CLI commands
2. Set up your AI models with `mald ai setup`
3. Customize your configuration
4. Start building your knowledge graph!

---
*Generated by MALD v0.1.0*
"""
    
    welcome_note.write_text(welcome_content)
    logger.info(f"Created default knowledge base at {kb_path}")


def _setup_tmux_config(mald_home):
    """Setup tmux configuration"""
    config_dir = mald_home / 'config'
    tmux_config = config_dir / 'tmux.conf'
    
    tmux_content = """# MALD tmux configuration
# Terminal and colors
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color*:Tc"

# Prefix key
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Window and pane indexing
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# Mouse support
set -g mouse on

# Vim-style pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Vim-style copy mode
setw -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Status bar
set -g status-style bg=colour234,fg=colour137
set -g status-left '#[fg=colour233,bg=colour245,bold] MALD #[fg=colour245,bg=colour234,nobold]'
set -g status-right '#[fg=colour233,bg=colour245,bold] %Y-%m-%d %H:%M '

# Window status
setw -g window-status-current-style fg=colour81,bg=colour238,bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '
setw -g window-status-style fg=colour138,bg=colour235,none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

# Pane borders
set -g pane-border-style fg=colour238
set -g pane-active-border-style fg=colour81

# MALD-specific bindings
bind-key k run-shell "mald kb list"
bind-key n run-shell "mald kb create"
bind-key a run-shell "mald ai chat"
"""
    
    tmux_config.write_text(tmux_content)
    logger.info(f"Created tmux config: {tmux_config}")


def _setup_neovim_config(mald_home):
    """Setup neovim configuration"""
    config_dir = mald_home / 'config'
    nvim_dir = config_dir / 'nvim'
    nvim_dir.mkdir(exist_ok=True)
    
    init_lua = nvim_dir / 'init.lua'
    init_content = """-- MALD Neovim Configuration
-- Minimal, focused configuration for knowledge management and coding

-- Basic settings
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 2
vim.opt.tabstop = 2
vim.opt.smartindent = true
vim.opt.wrap = false
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.incsearch = true
vim.opt.hlsearch = true
vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.opt.updatetime = 50
vim.opt.colorcolumn = "80"

-- Leader key
vim.g.mapleader = " "

-- Key mappings
vim.keymap.set("n", "<leader>e", vim.cmd.Ex)
vim.keymap.set("n", "<leader>w", "<cmd>w<CR>")
vim.keymap.set("n", "<leader>q", "<cmd>q<CR>")

-- MALD-specific mappings
vim.keymap.set("n", "<leader>mk", "<cmd>!mald kb list<CR>")
vim.keymap.set("n", "<leader>ma", "<cmd>!mald ai chat<CR>")
vim.keymap.set("n", "<leader>ms", "<cmd>!mald session<CR>")

-- Markdown-specific settings
vim.api.nvim_create_autocmd("FileType", {
  pattern = "markdown",
  callback = function()
    vim.opt_local.wrap = true
    vim.opt_local.linebreak = true
    vim.opt_local.conceallevel = 2
  end,
})

-- Basic autocommands
vim.api.nvim_create_autocmd("BufWritePre", {
  pattern = "*",
  callback = function()
    -- Remove trailing whitespace
    vim.cmd([[%s/\\s\\+$//e]])
  end,
})

print("MALD Neovim configuration loaded")
"""
    
    init_lua.write_text(init_content)
    logger.info(f"Created neovim config: {init_lua}")